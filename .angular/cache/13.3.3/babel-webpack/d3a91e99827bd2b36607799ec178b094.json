{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst _c0 = [\"*\"];\nexport let GanttChartView = /*#__PURE__*/(() => {\n  class GanttChartView {\n    constructor(elementRef) {\n      this.style = \"\";\n      this.items = [];\n      this.settings = {};\n      this.rootElement = elementRef.nativeElement;\n    }\n\n    ngOnInit() {\n      var element = this.rootElement.firstChild;\n      element.setAttribute('style', this.style);\n      var changeHandler = this.settings.itemPropertyChangeHandler;\n      DlhSoft.Controls.GanttChartView.initialize(element, this.items, this.settings, this.license);\n\n      if (this.change) {\n        this.settings.itemPropertyChangeHandler = (item, propertyName, isDirect, isFinal) => {\n          if (changeHandler) changeHandler(item, propertyName, isDirect, isFinal);\n          this.change(item, propertyName, isDirect, isFinal);\n        };\n      }\n    }\n\n  }\n\n  GanttChartView.ɵfac = function GanttChartView_Factory(t) {\n    return new (t || GanttChartView)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  GanttChartView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GanttChartView,\n    selectors: [[\"ganttchartview\"]],\n    inputs: {\n      style: \"style\",\n      items: \"items\",\n      settings: \"settings\",\n      license: \"license\",\n      change: \"change\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function GanttChartView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return GanttChartView;\n})();\nexport let ScheduleChartView = /*#__PURE__*/(() => {\n  class ScheduleChartView {\n    constructor(elementRef) {\n      this.style = \"\";\n      this.items = [];\n      this.settings = {};\n      this.rootElement = elementRef.nativeElement;\n    }\n\n    ngOnInit() {\n      var element = this.rootElement.firstChild;\n      element.setAttribute('style', this.style);\n      var changeHandler = this.settings.itemPropertyChangeHandler;\n      DlhSoft.Controls.ScheduleChartView.initialize(element, this.items, this.settings, this.license);\n\n      if (this.change) {\n        this.settings.itemPropertyChangeHandler = (item, propertyName, isDirect, isFinal) => {\n          if (changeHandler) changeHandler(item, propertyName, isDirect, isFinal);\n          this.change(item, propertyName, isDirect, isFinal);\n        };\n      }\n    }\n\n  }\n\n  ScheduleChartView.ɵfac = function ScheduleChartView_Factory(t) {\n    return new (t || ScheduleChartView)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ScheduleChartView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ScheduleChartView,\n    selectors: [[\"schedulechartview\"]],\n    inputs: {\n      style: \"style\",\n      items: \"items\",\n      settings: \"settings\",\n      license: \"license\",\n      change: \"change\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function ScheduleChartView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return ScheduleChartView;\n})();\nexport let LoadChartView = /*#__PURE__*/(() => {\n  class LoadChartView {\n    constructor(elementRef) {\n      this.style = \"\";\n      this.items = [];\n      this.settings = {};\n      this.rootElement = elementRef.nativeElement;\n    }\n\n    ngOnInit() {\n      var element = this.rootElement.firstChild;\n      element.setAttribute('style', this.style);\n      var changeHandler = this.settings.itemPropertyChangeHandler;\n      DlhSoft.Controls.LoadChartView.initialize(element, this.items, this.settings, this.license);\n\n      if (this.change) {\n        this.settings.itemPropertyChangeHandler = (item, propertyName, isDirect, isFinal) => {\n          if (changeHandler) changeHandler(item, propertyName, isDirect, isFinal);\n          this.change(item, propertyName, isDirect, isFinal);\n        };\n      }\n    }\n\n  }\n\n  LoadChartView.ɵfac = function LoadChartView_Factory(t) {\n    return new (t || LoadChartView)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  LoadChartView.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoadChartView,\n    selectors: [[\"loadchartview\"]],\n    inputs: {\n      style: \"style\",\n      items: \"items\",\n      settings: \"settings\",\n      license: \"license\",\n      change: \"change\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function LoadChartView_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return LoadChartView;\n})();","map":null,"metadata":{},"sourceType":"module"}