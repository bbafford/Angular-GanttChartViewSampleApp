{"ast":null,"code":"// imports for the Gantt chart control\nvar GanttChartView = DlhSoft.Controls.GanttChartView;\nimport { isNull } from 'util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./ticket-list.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../DlhSoft/DlhSoft.ProjectData.GanttChart.Angular.Components\";\nexport let TicketListComponent = /*#__PURE__*/(() => {\n  class TicketListComponent {\n    constructor(ticketService, http) {\n      this.mapProgressbyMilestone = new Map();\n      this.mapMilestoneDates = new Map();\n      this.milestones = [];\n      this.projects = []; //Project milestones and the amount of expected work\n\n      this.itemsMilestones = [];\n      this.milestoneslist = [];\n      this.title = 'Tickets and Milestones';\n      this.items = [];\n      this.gcv = DlhSoft.Controls.GanttChartView;\n      this.ticketService = ticketService;\n      this.http = http;\n    }\n\n    ngOnInit() {\n      this.configureSettings();\n      this.projects = [\"Pierce Transit - Lakewood, WA\", \"VTA - Santa Clara\", \"AC Transit - Oakland - California\", \"WMATA - Washington DC Transit\", \"METRA Transit -  Metropolitan Rail Corporation\", \"CCB - Culver City\", \"TTC - Toronto\"];\n      this.getMilestoneHoursList();\n    }\n\n    getMilestoneHoursList() {\n      this.http.get('http://localhost:3000/milestones').subscribe(data => {\n        this.milestoneslist = data;\n        console.log(\"MILESTONE LIST: \", this.milestoneslist);\n        this.drawTickets();\n      });\n    }\n\n    drawTickets() {\n      var localitems = [];\n      var k;\n      var milestoneDate;\n      const ganttChartView = document.getElementById(\"ganttChartView\");\n\n      for (let i = 0; i < this.projects.length; i++) {\n        //run through the list of projects, for each of the projects, query the server and pull down the tickets for that project.\n        this.http.get('http://localhost:3001/tickets?customers=' + this.projects[i]).subscribe(data => {\n          //Clear the milestone list of before working on this project\n          localitems = [];\n          this.mapProgressbyMilestone.clear(); //push the project into the list of items for the map\n\n          localitems.push({\n            'content': this.projects[i],\n            indentation: 0,\n            start: new Date(2022, 1, 1)\n          });\n          this.tickets = data; // console.log(\"in ticket list:\",data.issues)\n\n          let running_total = 0; //Get a list of time by project and milestone  \n          //sum the projects by \n\n          for (let i = 0; i < data.issues.length; i++) {\n            if (!isNull(data.issues[i].fields.customfield_15761)) {\n              //get the milestone name\n              this.milestone = data.issues[i].fields.customfield_15761[0].value;\n            } else {\n              this.milestone = \"empty\";\n            } //find the estimated time required to complete the ticket\n\n\n            let estimate = data.issues[i].fields.progress.total; //find out if the set\n\n            if (this.mapProgressbyMilestone.has(this.milestone)) {\n              running_total = this.mapProgressbyMilestone.get(this.milestone);\n            } else {\n              running_total = 0;\n            } //console.log(\"ticket number:\", data.issues[i].key, \" estimate: \", estimate, \" running totle:\" , running_total)\n\n\n            this.mapProgressbyMilestone.set(this.milestone, estimate + running_total);\n          }\n\n          console.log(this.mapProgressbyMilestone);\n          console.log(\"about to hit setup milestones hours\"); //loop through the milesstones you've just created and add them to the map\n\n          k = 0;\n\n          for (let entry of this.mapProgressbyMilestone.entries()) {\n            //find the milestone date by looking throught milestone list and comparing the project and milestone to what we are looking at \n            //right now\n            for (let j = 0; j < this.milestoneslist.length; j++) {\n              console.log(\"milestone name: \", this.milestoneslist[j].milestone, \" milestone project\", this.milestoneslist[j].project);\n\n              if (entry[0] == this.milestoneslist[j].milestone || this.projects[i] == this.milestoneslist[j].project) {\n                milestoneDate = this.milestoneslist[j].start;\n                console.log(\"The Milestone date is:\", milestoneDate);\n              }\n            }\n\n            k++; // console.log(\"entry is key: \", entry[0])  \n            // console.log(\"entry is value: \", entry[1])  \n\n            console.log(localitems);\n            localitems.push({\n              'content': entry[0],\n              indentation: 1,\n              start: milestoneDate,\n              isMilestone: true\n            });\n            localitems[k]['hours'] = entry[1] / 3600;\n          }\n\n          this.items = [...this.items, ...localitems];\n          console.log(\"the combined array is\", this.items); //this.setupMilestoneHours();\n\n          DlhSoft.Controls.GanttChartView.initialize(ganttChartView, this.items, this.settings).refresh;\n        });\n      }\n    }\n\n    drawMilestoneIcons() {\n      //build a list of unique projects first - prob a cleaner way of doing this using a lamba function and map...\n      var projects = new Set();\n      var p;\n      var key;\n      var values;\n      console.log(\"drawMilestoneIcons: this.mapMilestoneDates\", this.mapMilestoneDates);\n\n      for (let entry of this.mapMilestoneDates.entries()) {\n        console.log(\"entry is key: \", entry[0]);\n        console.log(\"entry is value: \", entry[1]);\n\n        if (projects.has(entry[0].project) == false) {\n          projects.add(entry[0].project);\n        }\n      }\n\n      console.log(\"drawMilestoneIcons: projects set\", projects);\n\n      for (let p of projects.entries()) {\n        console.log(\"Looping through projects Set- project\", p[0]);\n        this.itemsMilestones.push({\n          'content': p[0],\n          indentation: 0,\n          start: new Date(2022, 1, 1)\n        });\n\n        for (let entry of this.mapMilestoneDates.entries()) {\n          console.log(\"drawMilestoneIcons - milestone loop\", entry[0], \" - \", entry[1]);\n          key = entry[0];\n          values = entry[1]; //console.log(\"key.project\", key.project, \" p\", p[0], \"valuation - \",key.project == p[0])\n\n          if (key.project == p[0]) {\n            console.log(\"actually in this if loop\");\n            this.itemsMilestones.push({\n              'content': key.milestone,\n              indentation: 1,\n              start: new Date(key.start),\n              finish: new Date(key.start),\n              isMilestone: true\n            });\n            this.itemsMilestones[this.itemsMilestones.length - 1]['hours'] = values;\n          }\n        }\n      }\n\n      console.log(\"drawMilestoneIcons - after building items milestone list\", this.itemsMilestones);\n      const ganttChartView = document.getElementById(\"ganttChartView\");\n      DlhSoft.Controls.GanttChartView.initialize(ganttChartView, this.itemsMilestones, this.settings).refresh;\n    }\n\n    setupMilestoneHours() {\n      this.http.get('http://localhost:3000/milestones').subscribe(data => {\n        this.milestones = data;\n        console.log(data);\n        console.log(\"check the progress by milestone map\", this.mapProgressbyMilestone);\n\n        for (let i = 0; i < data.length; i++) {\n          console.log(\"milestone name\", data[i].milestone);\n          let m = data[i].milestone;\n\n          if (this.mapProgressbyMilestone.has(m)) {\n            this.mapMilestoneDates.set(data[i], this.mapProgressbyMilestone.get(data[i].milestone));\n            console.log(this.mapMilestoneDates);\n          } else {}\n        } //draw the milestones on the chart and make it so when you hover over, it tells you the hours\n\n\n        this.drawMilestoneIcons();\n      });\n    }\n\n    getMilestoneHoursListener() {}\n\n    configureSettings() {\n      this.settings = {\n        // Auto-scheduling is initially turned on.\n        areTaskDependencyConstraintsEnabled: true,\n        // Other settings that you can enable and customize as needed in your application.\n        // isGridVisible: false,\n        // gridWidth: '30%',\n        // chartWidth: '70%',\n        // isGridReadOnly: true,\n        // isChartReadOnly: true,\n        // isVirtualizing: false,\n        // isTaskEffortPreservedWhenStartChangesInGrid: true,\n        // border: 'Gray',\n        // gridLines: 'LightGray',\n        // standardBarStyle: 'stroke: Green; fill: LightGreen',\n        // standardCompletedBarStyle: 'stroke: DarkGreen; fill: DarkGreen',\n        // dependencyLineStyle: 'stroke: Green; fill: none; marker-end: url(#ArrowMarker)',\n        // alternativeItemStyle: 'background-color: #f9f9f9', alternativeChartItemStyle: 'fill: #f9f9f9',\n        itemTemplate: item => {\n          var toolTip = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n          var toolTipContent = item.content + ' • ' + 'Start: ' + item.start.toLocaleString();\n          if (!item.isMilestone) toolTipContent += ' • ' + 'Finish: ' + item.finish.toLocaleString();\n          toolTip.appendChild(document.createTextNode(toolTipContent));\n          return toolTip;\n        },\n        currentTime: new Date() // Display the current time vertical line of the chart at the project start date.\n\n      }; // Define schedule.\n      // settings.schedule = {\n      //      workingWeekStart: 1, workingWeekFinish: 5, // Monday - Friday\n      //      visibleDayStart: 8 * 60 * 60 * 1000, visibleDayFinish: 16 * 60 * 60 * 1000 // 8 AM - 4 PM\n      //      // , specialNonworkingDays: [new Date(2016, 2 - 1, 19), new Date(2016, 2 - 1, 21)] // excluded\n      // };\n      // var specialSchedule = <GanttChartView.Schedule>{\n      //      workingWeekStart: 0, workingWeekFinish: 3, // Sunday - Wednesday\n      //      workingDayStart: 9 * 60 * 60 * 1000, workingDayFinish: 19 * 60 * 60 * 1000 // 9 AM - 7 PM, exceeding visible 4 PM\n      //      // , specialNonworkingDays: [new Date(2016, 2 - 1, 18), new Date(2016, 2 - 1, 21), new Date(2016, 2 - 1, 22)] // partial replacement for excluded dates\n      // };\n      // items[4].schedule = specialSchedule;\n      // items[5].schedule = specialSchedule;\n      // Configure selection.\n      // settings.selectionMode = 'Extended'; // Supported values: None, Focus (default), Single, Extended, ExtendedFocus.\n      // settings.selectedItemStyle = 'background: LightCyan';\n      // items[6].isSelected = true;\n      // Customize columns.\n\n      var columns = GanttChartView.getDefaultColumns(this.items, this.settings);\n      var indexOffset = columns[0].isSelection ? 1 : 0; // columns[0 + indexOffset].header = 'Work items';\n      // columns[0 + indexOffset].width = 240;\n\n      columns.splice(0 + indexOffset, 0, {\n        header: '',\n        width: 40,\n        cellTemplate: GanttChartView.getIndexColumnTemplate()\n      });\n      columns.splice(3 + indexOffset, 0, {\n        header: 'Effort (h)',\n        width: 80,\n        cellTemplate: GanttChartView.getTotalEffortColumnTemplate(64)\n      });\n      columns.splice(4 + indexOffset, 0, {\n        header: 'Duration (d)',\n        width: 80,\n        cellTemplate: GanttChartView.getDurationColumnTemplate(64, 8)\n      });\n      columns.splice(8 + indexOffset, 0, {\n        header: '%',\n        width: 80,\n        cellTemplate: GanttChartView.getCompletionColumnTemplate(64)\n      });\n      columns.splice(9 + indexOffset, 0, {\n        header: 'Predecessors',\n        width: 100,\n        cellTemplate: GanttChartView.getPredecessorsColumnTemplate(84)\n      });\n      columns.push({\n        header: 'Cost ($)',\n        width: 100,\n        cellTemplate: GanttChartView.getCostColumnTemplate(84)\n      });\n      columns.push({\n        header: 'Est. start',\n        width: 140,\n        cellTemplate: GanttChartView.getBaselineStartColumnTemplate(124, true, true, 8 * 60 * 60 * 1000)\n      }); // 8 AM\n\n      columns.push({\n        header: 'Est. finish',\n        width: 140,\n        cellTemplate: GanttChartView.getBaselineFinishColumnTemplate(124, true, true, 16 * 60 * 60 * 1000)\n      }); // 4 PM\n      //this.items['description'] = 'Custom description';\n\n      columns.push({\n        header: 'Description',\n        width: 200,\n        cellTemplate: item => {\n          return item['ganttChartView'].ownerDocument.createTextNode(item['description']);\n        }\n      });\n      columns.push({\n        header: 'hours',\n        width: 200,\n        cellTemplate: item => {\n          return item['ganttChartView'].ownerDocument.createTextNode(item['hours']);\n        }\n      }); //columns[10 + indexOffset].cellTemplate = GanttChartView.getAssignmentSelectorColumnTemplate(184, (item) { return ['Resource 1', 'Resource 2'] });\n      //items[7]['targetDate'] = new Date(2016, 2 - 1, 28, 12, 0, 0);\n      //columns.push({ header: 'Target date', width: 140, cellTemplate: (item)  => {\n      //    return GanttChartView.datePickerInputColumnTemplateBase(item['ganttChartView'].ownerDocument, 140,\n      //        function () { return GanttChartView.getInputDate(item['targetDate']); }, \n      //        function (value) { item['targetDate'] = GanttChartView.getOutputDate(value); }); } });\n\n      this.settings.columns = columns; //var ganttChartView = document.querySelector('#ganttChartView');\n\n      const ganttChartView = document.getElementById(\"ganttChartView\"); //this.gcv=DlhSoft.Controls.GanttChartView.initialize(ganttChartView, this.items, settings)\n\n      DlhSoft.Controls.GanttChartView.initialize(ganttChartView, this.items, this.settings).refresh;\n\n      this.onItemChanged = (item, propertyName, isDirect, isFinal) => {\n        if (!isDirect || !isFinal) // Skip internal changes, and changes occurred during drag operations.\n          return;\n        console.log(propertyName + ' changed for ' + item.content + '.' + item.index + item[propertyName] + '.');\n      };\n    }\n\n    ngOnDestroy() {\n      this.ticketSubs.unsubscribe();\n      this.milestoneSubs.unsubscribe();\n    }\n\n  }\n\n  TicketListComponent.ɵfac = function TicketListComponent_Factory(t) {\n    return new (t || TicketListComponent)(i0.ɵɵdirectiveInject(i1.TicketService), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n\n  TicketListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TicketListComponent,\n    selectors: [[\"app-ticket-list\"]],\n    decls: 6,\n    vars: 3,\n    consts: [[\"id\", \"ganttChartView\"], [2, \"min-height\", \"388px\", 3, \"items\", \"settings\", \"change\"]],\n    template: function TicketListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"body\")(1, \"h1\");\n        i0.ɵɵtext(2, \"Project Milestones and Ticket Hours\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 0)(4, \"ganttchartview\", 1);\n        i0.ɵɵtext(5, \"...\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"items\", ctx.items)(\"settings\", ctx.settings)(\"change\", ctx.onItemChanged);\n      }\n    },\n    directives: [i3.GanttChartView],\n    styles: [\"\", \"[_nghost-%COMP%] {\\n      font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";\\n      font-size: 14px;\\n      color: #333;\\n      box-sizing: border-box;\\n      -webkit-font-smoothing: antialiased;\\n      -moz-osx-font-smoothing: grayscale;\\n    }\\n  \\n    h1[_ngcontent-%COMP%], h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%], h5[_ngcontent-%COMP%], h6[_ngcontent-%COMP%] {\\n      margin: 8px 0;\\n    }\\n  \\n    p[_ngcontent-%COMP%] {\\n      margin: 0;\\n    }\\n  \\n    .spacer[_ngcontent-%COMP%] {\\n      flex: 1;\\n    }\\n  \\n    .toolbar[_ngcontent-%COMP%] {\\n      height: 60px;\\n      margin: -8px;\\n      display: flex;\\n      align-items: center;\\n      background-color: #1976d2;\\n      color: white;\\n      font-weight: 600;\\n    }\\n  \\n    .toolbar[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n      margin: 0 16px;\\n    }\\n  \\n    .toolbar[_ngcontent-%COMP%]   #twitter-logo[_ngcontent-%COMP%] {\\n      height: 40px;\\n      margin: 0 16px;\\n    }\\n  \\n    .toolbar[_ngcontent-%COMP%]   #twitter-logo[_ngcontent-%COMP%]:hover {\\n      opacity: 0.8;\\n    }\\n  \\n    .content[_ngcontent-%COMP%] {\\n      display: flex;\\n      margin: 32px auto;\\n      padding: 0 16px;\\n      max-width: 960px;\\n      flex-direction: column;\\n      align-items: center;\\n    }\\n  \\n    svg.material-icons[_ngcontent-%COMP%] {\\n      height: 24px;\\n      width: auto;\\n    }\\n  \\n    svg.material-icons[_ngcontent-%COMP%]:not(:last-child) {\\n      margin-right: 8px;\\n    }\\n  \\n    .card[_ngcontent-%COMP%]   svg.material-icons[_ngcontent-%COMP%]   path[_ngcontent-%COMP%] {\\n      fill: #888;\\n    }\\n  \\n    .card-container[_ngcontent-%COMP%] {\\n      display: flex;\\n      flex-wrap: wrap;\\n      justify-content: center;\\n      margin-top: 16px;\\n    }\\n  \\n    .card[_ngcontent-%COMP%] {\\n      border-radius: 4px;\\n      border: 1px solid #eee;\\n      background-color: #fafafa;\\n      height: 40px;\\n      width: 200px;\\n      margin: 0 8px 16px;\\n      padding: 16px;\\n      display: flex;\\n      flex-direction: row;\\n      justify-content: center;\\n      align-items: center;\\n      transition: all 0.2s ease-in-out;\\n      line-height: 24px;\\n    }\\n  \\n    .card-container[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]:not(:last-child) {\\n      margin-right: 0;\\n    }\\n  \\n    .card.card-small[_ngcontent-%COMP%] {\\n      height: 16px;\\n      width: 168px;\\n    }\\n  \\n    .card-container[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]:not(.highlight-card) {\\n      cursor: pointer;\\n    }\\n  \\n    .card-container[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]:not(.highlight-card):hover {\\n      transform: translateY(-3px);\\n      box-shadow: 0 4px 17px rgba(black, 0.35);\\n    }\\n  \\n    .card-container[_ngcontent-%COMP%]   .card[_ngcontent-%COMP%]:not(.highlight-card):hover   .material-icons[_ngcontent-%COMP%]   path[_ngcontent-%COMP%] {\\n      fill: rgb(105, 103, 103);\\n    }\\n  \\n    .card.highlight-card[_ngcontent-%COMP%] {\\n      background-color: #1976d2;\\n      color: white;\\n      font-weight: 600;\\n      border: none;\\n      width: auto;\\n      min-width: 30%;\\n      position: relative;\\n    }\\n  \\n    .card.card.highlight-card[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n      margin-left: 60px;\\n    }\\n  \\n    svg#rocket[_ngcontent-%COMP%] {\\n      width: 80px;\\n      position: absolute;\\n      left: -10px;\\n      top: -24px;\\n    }\\n  \\n    svg#rocket-smoke[_ngcontent-%COMP%] {\\n      height: 100vh;\\n      position: absolute;\\n      top: 10px;\\n      right: 180px;\\n      z-index: -10;\\n    }\\n  \\n    a[_ngcontent-%COMP%], a[_ngcontent-%COMP%]:visited, a[_ngcontent-%COMP%]:hover {\\n      color: #1976d2;\\n      text-decoration: none;\\n    }\\n  \\n    a[_ngcontent-%COMP%]:hover {\\n      color: #125699;\\n    }\\n  \\n    .terminal[_ngcontent-%COMP%] {\\n      position: relative;\\n      width: 80%;\\n      max-width: 600px;\\n      border-radius: 6px;\\n      padding-top: 45px;\\n      margin-top: 8px;\\n      overflow: hidden;\\n      background-color: rgb(15, 15, 16);\\n    }\\n  \\n    .terminal[_ngcontent-%COMP%]::before {\\n      content: \\\"\\\\2022 \\\\2022 \\\\2022\\\";\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      height: 4px;\\n      background: rgb(58, 58, 58);\\n      color: #c2c3c4;\\n      width: 100%;\\n      font-size: 2rem;\\n      line-height: 0;\\n      padding: 14px 0;\\n      text-indent: 4px;\\n    }\\n  \\n    .terminal[_ngcontent-%COMP%]   pre[_ngcontent-%COMP%] {\\n      font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;\\n      color: white;\\n      padding: 0 1rem 1rem;\\n      margin: 0;\\n    }\\n  \\n    .circle-link[_ngcontent-%COMP%] {\\n      height: 40px;\\n      width: 40px;\\n      border-radius: 40px;\\n      margin: 8px;\\n      background-color: white;\\n      border: 1px solid #eeeeee;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      cursor: pointer;\\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\\n      transition: 1s ease-out;\\n    }\\n  \\n    .circle-link[_ngcontent-%COMP%]:hover {\\n      transform: translateY(-0.25rem);\\n      box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\\n    }\\n  \\n    footer[_ngcontent-%COMP%] {\\n      margin-top: 8px;\\n      display: flex;\\n      align-items: center;\\n      line-height: 20px;\\n    }\\n  \\n    footer[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n      display: flex;\\n      align-items: center;\\n    }\\n  \\n    .github-star-badge[_ngcontent-%COMP%] {\\n      color: #24292e;\\n      display: flex;\\n      align-items: center;\\n      font-size: 12px;\\n      padding: 3px 10px;\\n      border: 1px solid rgba(27,31,35,.2);\\n      border-radius: 3px;\\n      background-image: linear-gradient(-180deg,#fafbfc,#eff3f6 90%);\\n      margin-left: 4px;\\n      font-weight: 600;\\n      font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;\\n    }\\n  \\n    .github-star-badge[_ngcontent-%COMP%]:hover {\\n      background-image: linear-gradient(-180deg,#f0f3f6,#e6ebf1 90%);\\n      border-color: rgba(27,31,35,.35);\\n      background-position: -.5em;\\n    }\\n  \\n    .github-star-badge[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%] {\\n      height: 16px;\\n      width: 16px;\\n      margin-right: 4px;\\n    }\\n  \\n    svg#clouds[_ngcontent-%COMP%] {\\n      position: fixed;\\n      bottom: -160px;\\n      left: -230px;\\n      z-index: -10;\\n      width: 1920px;\\n    }\\n  \\n  \\n    \\n    @media screen and (max-width: 767px) {\\n  \\n      .card-container[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%]:not(.circle-link), .terminal[_ngcontent-%COMP%] {\\n        width: 100%;\\n      }\\n  \\n      .card[_ngcontent-%COMP%]:not(.highlight-card) {\\n        height: 16px;\\n        margin: 8px 0;\\n      }\\n  \\n      .card.highlight-card[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n        margin-left: 72px;\\n      }\\n  \\n      svg#rocket-smoke[_ngcontent-%COMP%] {\\n        right: 120px;\\n        transform: rotate(-5deg);\\n      }\\n    }\\n  \\n    @media screen and (max-width: 575px) {\\n      svg#rocket-smoke[_ngcontent-%COMP%] {\\n        display: none;\\n        visibility: hidden;\\n      }\\n    }\"]\n  });\n  return TicketListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}